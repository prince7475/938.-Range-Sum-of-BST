Given the root node of a binary search tree, 
return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.

 

Example 1:

Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
Output: 32
Example 2:

Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
Output: 23

Time = O(n)
space = O(log(n))

function rangeSumBST(root, L, R){
  return sumOfBSTHelper(root,L,R)
}


function sumOFBSTHelper(node,L,R){
  let sum = 0
  if(node === null){
    return sum
   }
   
   if(node.val >= L && node.val <= R){
    sum+= node.val
   }
   
   sum += sumOfBSTHelper(node.left, L,R) + sumOfBSTHelper(node.right,L,R)
   return sum
}

helper(node, L, R){
let sum = 0
  if(node === null){
    return sum
  }
  
  if(node.val >= L && node.val <= R){
    sum += node.val
  }
  
  
   sum += helper(node.left) + helper(node.right)
   
   return sum
}
